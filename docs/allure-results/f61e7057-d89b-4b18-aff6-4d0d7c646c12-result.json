{"name": "test_job_link_content[lugera]", "status": "failed", "statusDetails": {"message": "AssertionError: The following job links ['https://www.lugera.ro/jobex/public/ro/job-details/analist-vanzari-junior_6373.html', 'https://www.lugera.ro/jobex/public/ro/job-details/brand-manager_6376.html', 'https://www.lugera.ro/jobex/public/ro/job-details/civil-engineer-of-solar-pv-power-station-projects_6377.html', 'https://www.lugera.ro/jobex/public/ro/job-details/coordonator-senior-marketing_6372.html', 'https://www.lugera.ro/jobex/public/ro/job-details/fasttrack-app-assure-manager_6374.html', 'https://www.lugera.ro/jobex/public/ro/job-details/inspector-resurse-umane_6378.html', 'https://www.lugera.ro/jobex/public/ro/job-details/key-account-sales-manager_6379.html', 'https://www.lugera.ro/jobex/public/ro/job-details/specialist-ssm_6371.html', 'https://www.lugera.ro/jobex/public/ro/job-details/tehnician-service-teren_6370.html'] do not contain the expected job title: ['Analist Vanzari (junior)', 'Brand Manager', 'Civil Engineer of solar (PV) power station projects', 'Coordonator Senior Marketing', 'FastTrack App Assure Manager', 'Inspector Resurse Umane', 'Key Account Sales Manager', 'Specialist SSM', 'Tehnician Service Teren']", "trace": "self = <TestJobsValidator.test_api.TestScrapers object at 0x7fc37bdc3e20>\nsetup = (['Account Manager', 'Accountant', 'Agent Vanzari', 'Agent Vanzari Credite', 'Agent Vanzari Credite - Cluj', 'Agent Va..., 'Romania', 'Romania', 'Romania', ...], [['Bucuresti'], ['Bucuresti'], ['Bihor'], ['Timis'], ['Cluj'], ['Arad'], ...])\n\n    @pytest.mark.smoke\n    def test_job_link_content(self, setup):\n        \"\"\"\n        Test job links for the job title presence in the html response output\n        \"\"\"\n    \n        peviitor_jobs_data = setup\n        job_links = peviitor_jobs_data[2]\n        job_titles = peviitor_jobs_data[0]\n>       TestScrapers.setup_tests.jobdetails.check_job_link_content(job_links, job_titles)\n\ntests/TestJobsValidator/test_api.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/TestJobsValidator/api_utils/job_details_utils.py:133: in check_job_link_content\n    self.linkutils.check_job_link_content(self, links, job_titles)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.TestJobsValidator.api_utils.job_links_utils.LinksTestUtils object at 0x7fc37c05e620>\nmainobj = <tests.TestJobsValidator.api_utils.job_details_utils.JobDetails object at 0x7fc37cc34280>\nlinks = ['https://www.lugera.ro/jobex/public/ro/job-details/account-manager_6410.html', 'https://www.lugera.ro/jobex/public/ro...credite-cluj_6401.html', 'https://www.lugera.ro/jobex/public/ro/job-details/agent-vanzari-credite-arad_6396.html', ...]\njob_titles = ['Account Manager', 'Accountant', 'Agent Vanzari', 'Agent Vanzari Credite', 'Agent Vanzari Credite - Cluj', 'Agent Vanzari Credite_Arad', ...]\n\n    def check_job_link_content(self, mainobj, links, job_titles):\n        missing_job_links = []\n        missing_job_titles = []\n        for link, job_title in zip(links, job_titles):\n            job_content = LinksTestUtils().get_html_content(link)\n            # Decode url encoded response in case is needed to proper check the title presence in page\n            job_content = urllib.parse.unquote(job_content)\n            # assert job_title in job_content, f\"Job title is:{job_title} and job_content: {job_content}\"\n    \n            # Section where the content is not loaded after the request\n            if job_content is None:\n                missing_job_links.append(link)\n                missing_job_titles.append(job_title)\n                print(\"Job Page content has not been loaded\")\n                for job_link_index, job_link in enumerate(mainobj.filtered_job_links):\n                    if job_link == link:\n                        mainobj.filtered_job_links[job_link_index] = 'REMOVED_JOB'\n                continue\n    \n            # Section that run in case the job page content is loaded\n            soup = BeautifulSoup(job_content, 'html.parser')\n            job_content = soup.get_text()\n            # assert job_title in job_content, f\"Job title is:{job_title} and job_content: {job_content}\"\n            if job_title not in job_content:\n                missing_job_links.append(link)\n                missing_job_titles.append(job_title)\n                for job_link_index, job_link in enumerate(mainobj.filtered_job_links):\n                    if job_link == link:\n                        mainobj.filtered_job_links[job_link_index] = 'REMOVED_JOB'\n    \n>       assert missing_job_links == [], f\"The following job links {missing_job_links} do not contain the expected job title: {missing_job_titles}\"\nE       AssertionError: The following job links ['https://www.lugera.ro/jobex/public/ro/job-details/analist-vanzari-junior_6373.html', 'https://www.lugera.ro/jobex/public/ro/job-details/brand-manager_6376.html', 'https://www.lugera.ro/jobex/public/ro/job-details/civil-engineer-of-solar-pv-power-station-projects_6377.html', 'https://www.lugera.ro/jobex/public/ro/job-details/coordonator-senior-marketing_6372.html', 'https://www.lugera.ro/jobex/public/ro/job-details/fasttrack-app-assure-manager_6374.html', 'https://www.lugera.ro/jobex/public/ro/job-details/inspector-resurse-umane_6378.html', 'https://www.lugera.ro/jobex/public/ro/job-details/key-account-sales-manager_6379.html', 'https://www.lugera.ro/jobex/public/ro/job-details/specialist-ssm_6371.html', 'https://www.lugera.ro/jobex/public/ro/job-details/tehnician-service-teren_6370.html'] do not contain the expected job title: ['Analist Vanzari (junior)', 'Brand Manager', 'Civil Engineer of solar (PV) power station projects', 'Coordonator Senior Marketing', 'FastTrack App Assure Manager', 'Inspector Resurse Umane', 'Key Account Sales Manager', 'Specialist SSM', 'Tehnician Service Teren']\n\ntests/TestJobsValidator/api_utils/job_links_utils.py:64: AssertionError"}, "description": "\n        Test job links for the job title presence in the html response output\n        ", "parameters": [{"name": "scraper_class", "value": "'lugera'"}], "start": 1730958082239, "stop": 1730958134383, "uuid": "1133511e-434b-482c-b697-aeea070d363b", "historyId": "d0fe07e29eb20b4e9bf7a088d18de9aa", "testCaseId": "3a863062a3835cf6b2ad4e16e5390871", "fullName": "tests.TestJobsValidator.test_api.TestScrapers#test_job_link_content", "labels": [{"name": "tag", "value": "smoke"}, {"name": "parentSuite", "value": "tests.TestJobsValidator"}, {"name": "suite", "value": "test_api"}, {"name": "subSuite", "value": "TestScrapers"}, {"name": "host", "value": "fv-az701-743"}, {"name": "thread", "value": "2045-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.TestJobsValidator.test_api"}]}