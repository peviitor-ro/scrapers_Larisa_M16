{"name": "Test if job titles from the bunge website contains special characters", "status": "failed", "statusDetails": {"message": "AssertionError: Peviitor is having job titles with special characters: ['Industrial Operations Trainee Program | Europe & Asia']", "trace": "get_job_details = ((['Bunge Romania Opportunities', 'AP Accountant with Italian', 'AR Accountant with Spanish', 'Junior AP Accountant', ...e', 'Bunge', 'Bunge', 'Bunge', 'Bunge', ...], ['on-site', 'on-site', 'on-site', 'on-site', 'on-site', 'on-site', ...]))\n\n    @pytest.mark.regression\n    @pytest.mark.API\n    def test_bunge_special_title_api(get_job_details):\n        allure.dynamic.title(f\"Test if job titles from the {company_name} website contains special characters\")\n    \n        scraped_jobs_data, peviitor_jobs_data = get_job_details\n        with allure.step(\"Step 1: Get job titles from the scraper\"):\n            job_titles_scraper = sorted(scraped_jobs_data[0])\n    \n        with allure.step(\"Step 2: Compare job titles from scraper response against the non special character variant\"):\n            allure.attach(f\"Scraper Actual Results: {job_titles_scraper}\", name=\"Expected Results\")\n>           testutils.check_special_job_titles(job_titles_scraper)\n\ntests/Test_API_Suite/test_bunge.py:66: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.utils.TestUtils object at 0x7fa22ddccee0>\nexpected_titles = ['AP Accountant with Italian', 'AR Accountant with Spanish', 'Automation Supervisor- Lehliu Plant', 'Bunge Romania Opportunities', 'Industrial Operations Trainee Program - Lehliu', 'Industrial Operations Trainee Program Buzau', ...]\n\n    def check_special_job_titles(self, expected_titles):\n        # return if any job title contains special characters\n        special_job_titles = [self.check_special_characters(job_title) for job_title in expected_titles if self.check_special_characters(job_title) != False]\n    \n        msg = \"Unknown error occured\"\n    \n        if special_job_titles:\n            msg = f\"Peviitor is having job titles with special characters: {special_job_titles}\"\n            for special_job_title in special_job_titles:\n                for job_title_index, job_title in enumerate(self.filtered_job_titles):\n                    if special_job_title == job_title:\n                        self.filtered_job_titles[job_title_index] = 'REMOVED_JOB'\n    \n        if not expected_titles and not special_job_titles:\n            msg = f\"Scraper is not grabbing any job titles\"\n            allure.step(msg)\n            raise AssertionError(msg)\n    \n        # Search if there are special job titles missing from expected_titles\n        filtered_special_job_titles = [self.return_without_special_characters(job_title) for job_title in expected_titles]\n        allure.attach(f\"Scraper Expected Results: {filtered_special_job_titles}\", name=\"Actual Results\")\n    \n        allure.step(msg)\n>       assert special_job_titles == [], msg\nE       AssertionError: Peviitor is having job titles with special characters: ['Industrial Operations Trainee Program | Europe & Asia']\n\ntests/utils.py:188: AssertionError"}, "steps": [{"name": "Step 1: Get job titles from the scraper", "status": "passed", "start": 1714149263665, "stop": 1714149263665}, {"name": "Step 2: Compare job titles from scraper response against the non special character variant", "status": "failed", "statusDetails": {"message": "AssertionError: Peviitor is having job titles with special characters: ['Industrial Operations Trainee Program | Europe & Asia']\n", "trace": "  File \"/home/runner/work/scrapers_Larisa_M16/scrapers_Larisa_M16/tests/Test_API_Suite/test_bunge.py\", line 66, in test_bunge_special_title_api\n    testutils.check_special_job_titles(job_titles_scraper)\n  File \"/home/runner/work/scrapers_Larisa_M16/scrapers_Larisa_M16/tests/utils.py\", line 188, in check_special_job_titles\n    assert special_job_titles == [], msg\n"}, "attachments": [{"name": "Expected Results", "source": "b7e934c5-d704-407a-b106-7c07e5bdd652-attachment.attach"}, {"name": "Actual Results", "source": "3e03821e-1e9a-4aa4-80c9-ddaaffb35a37-attachment.attach"}], "start": 1714149263665, "stop": 1714149263665}], "start": 1714149263665, "stop": 1714149263665, "uuid": "f0901a38-4715-4a85-b5ae-9c613ce443db", "historyId": "a9d8f4b82229afa2592eb7493e9218f6", "testCaseId": "a9d8f4b82229afa2592eb7493e9218f6", "fullName": "Test_API_Suite.test_bunge#test_bunge_special_title_api", "labels": [{"name": "tag", "value": "API"}, {"name": "tag", "value": "regression"}, {"name": "parentSuite", "value": "Test_API_Suite"}, {"name": "suite", "value": "test_bunge"}, {"name": "host", "value": "fv-az519-987"}, {"name": "thread", "value": "2027-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Test_API_Suite.test_bunge"}]}