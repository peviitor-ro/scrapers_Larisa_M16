{"name": "test_corteva_city_api", "status": "broken", "statusDetails": {"message": "pyppeteer.errors.TimeoutError: Navigation Timeout Exceeded: 8000 ms exceeded.", "trace": "@pytest.fixture(scope=\"module\")\n    def get_job_details():\n        \"\"\"\n        Fixture for scraping process from the career section.\n        \"\"\"\n>       scraper_data = cortevaScraper()\n\ntests/Test_API_Suite/test_corteva.py:14: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsites/corteva_scraper.py:24: in scraper\n    soup = GetDynamicSoup(\"https://careers.corteva.com/job-search-results/?keyword=Romania\")\nsites/__utils/dynamic_requests_html_shorts.py:33: in __new__\n    response.html.render()\n/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/requests_html-0.10.0-py3.10.egg/requests_html.py:598: in render\n    content, result, page = self.session.loop.run_until_complete(self._async_render(url=self.url, script=script, sleep=sleep, wait=wait, content=self.html, reload=reload, scrolldown=scrolldown, timeout=timeout, keep_page=keep_page))\n/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/asyncio/base_events.py:649: in run_until_complete\n    return future.result()\n/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/requests_html-0.10.0-py3.10.egg/requests_html.py:512: in _async_render\n    await page.goto(url, options={'timeout': int(timeout * 1000)})\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pyppeteer.page.Page object at 0x7fc8f39dd180>\nurl = 'https://careers.corteva.com/job-search-results/?keyword=Romania'\noptions = {'timeout': 8000}, kwargs = {}\nmainFrame = <pyppeteer.frame_manager.Frame object at 0x7fc8f39dcd90>\nreferrer = ''\nset_request = <function Page.goto.<locals>.set_request at 0x7fc8f3c39cf0>\neventListeners = [], timeout = 8000\nwatcher = <pyppeteer.navigator_watcher.NavigatorWatcher object at 0x7fc8f39dc1f0>\nresult = (set(), {<Future cancelled>})\n\n    async def goto(self, url: str, options: dict = None, **kwargs: Any) -> Optional[Response]:\n        \"\"\"Go to the ``url``.\n    \n        :arg string url: URL to navigate page to. The url should include\n                         scheme, e.g. ``https://``.\n    \n        Available options are:\n    \n        * ``timeout`` (int): Maximum navigation time in milliseconds, defaults\n          to 30 seconds, pass ``0`` to disable timeout. The default value can\n          be changed by using the :meth:`setDefaultNavigationTimeout` method.\n        * ``waitUntil`` (str|List[str]): When to consider navigation succeeded,\n          defaults to ``load``. Given a list of event strings, navigation is\n          considered to be successful after all events have been fired. Events\n          can be either:\n    \n          * ``load``: when ``load`` event is fired.\n          * ``domcontentloaded``: when the ``DOMContentLoaded`` event is fired.\n          * ``networkidle0``: when there are no more than 0 network connections\n            for at least 500 ms.\n          * ``networkidle2``: when there are no more than 2 network connections\n            for at least 500 ms.\n    \n        The ``Page.goto`` will raise errors if:\n    \n        * there's an SSL error (e.g. in case of self-signed certificates)\n        * target URL is invalid\n        * the ``timeout`` is exceeded during navigation\n        * then main resource failed to load\n    \n        .. note::\n            :meth:`goto` either raise error or return a main resource response.\n            The only exceptions are navigation to ``about:blank`` or navigation\n            to the same URL with a different hash, which would succeed and\n            return ``None``.\n    \n        .. note::\n            Headless mode doesn't support navigation to a PDF document.\n        \"\"\"\n        options = merge_dict(options, kwargs)\n        mainFrame = self._frameManager.mainFrame\n        if mainFrame is None:\n            raise PageError('No main frame.')\n    \n        referrer = self._networkManager.extraHTTPHeaders().get('referer', '')\n        requests: Dict[str, Request] = {}\n    \n        def set_request(req: Request) -> None:\n            if req.url not in requests:\n                requests[req.url] = req\n    \n        eventListeners = [helper.addEventListener(self._networkManager, NetworkManager.Events.Request, set_request,)]\n    \n        timeout = options.get('timeout', self._defaultNavigationTimeout)\n        watcher = NavigatorWatcher(self._frameManager, mainFrame, timeout, options)\n    \n        result = await self._navigate(url, referrer)\n        if result is not None:\n            raise PageError(result)\n        result = await watcher.navigationPromise()\n        watcher.cancel()\n        helper.removeEventListeners(eventListeners)\n        error = result[0].pop().exception()  # type: ignore\n        if error:\n>           raise error\nE           pyppeteer.errors.TimeoutError: Navigation Timeout Exceeded: 8000 ms exceeded.\n\n/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/pyppeteer-1.0.2-py3.10.egg/pyppeteer/page.py:837: TimeoutError"}, "start": 1714627045698, "stop": 1714627045698, "uuid": "db1ac003-8eeb-4afe-a06a-e417744d13e8", "historyId": "b160955fc21ca97dca5d7d79994b02f3", "testCaseId": "b160955fc21ca97dca5d7d79994b02f3", "fullName": "Test_API_Suite.test_corteva#test_corteva_city_api", "labels": [{"name": "tag", "value": "API"}, {"name": "tag", "value": "regression"}, {"name": "parentSuite", "value": "Test_API_Suite"}, {"name": "suite", "value": "test_corteva"}, {"name": "host", "value": "fv-az1041-210"}, {"name": "thread", "value": "2299-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Test_API_Suite.test_corteva"}]}