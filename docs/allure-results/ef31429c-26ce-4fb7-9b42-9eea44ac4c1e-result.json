{"name": "test_agilefreaks_link_scraper", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"0f520956c735af1a2bc07a6f3c94a1d6\")>\nexpected_wait = <selenium.webdriver.support.wait.WebDriverWait (session=\"0f520956c735af1a2bc07a6f3c94a1d6\")>\n\n    @pytest.fixture(scope=\"module\")\n    def scrape_ui(driver, expected_wait):\n        # open the browser\n        testutils.open_browser(driver, expected_wait)\n    \n        # Grab the data\n>       job_details = testutils.get_jobs_selenium()\n\ntests/Test_Selenium_Suite/test_agilefreaks.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/Test_Selenium_Suite/seleniumutils.py:81: in get_jobs_selenium\n    job_titles = self.peviitor.get_all_job_titles()\ntests/Test_Selenium_Suite/peviitor.py:59: in get_all_job_titles\n    job_titles = self.expected_wait.until(EC.presence_of_all_elements_located((By.CLASS_NAME , self.job_titles_class)))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"0f520956c735af1a2bc07a6f3c94a1d6\")>\nmethod = <function presence_of_all_elements_located.<locals>._predicate at 0x7fac65aa7010>\nmessage = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n/opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/selenium-4.10.0-py3.10.egg/selenium/webdriver/support/wait.py:95: TimeoutException"}, "start": 1713503906526, "stop": 1713503906526, "uuid": "509b03b1-8728-4c39-9c25-a7b51562ee02", "historyId": "a0888a961d647dc0a59c87f6f2ba8a93", "testCaseId": "a0888a961d647dc0a59c87f6f2ba8a93", "fullName": "Test_Selenium_Suite.test_agilefreaks#test_agilefreaks_link_scraper", "labels": [{"name": "tag", "value": "ui"}, {"name": "tag", "value": "regression"}, {"name": "parentSuite", "value": "Test_Selenium_Suite"}, {"name": "suite", "value": "test_agilefreaks"}, {"name": "host", "value": "fv-az772-704"}, {"name": "thread", "value": "2069-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Test_Selenium_Suite.test_agilefreaks"}]}