{"name": "Test job cities from the autototal website against Peviitor API Response", "status": "failed", "statusDetails": {"message": "AssertionError: An unknown error occurred", "trace": "get_job_details = ((['Operator comercial cu atributii de casier', 'Operator calculator (cu atributii de contabilitate primara)', 'Agent ... 'Autototal', 'Autototal', 'Autototal', ...], ['on-site', 'on-site', 'on-site', 'on-site', 'on-site', 'on-site', ...]))\n\n    @pytest.mark.regression\n    @pytest.mark.API\n    def test_autototal_city_api(get_job_details):\n        allure.dynamic.title(f\"Test job cities from the {company_name} website against Peviitor API Response\")\n    \n        scraped_jobs_data, peviitor_jobs_data = get_job_details\n        with allure.step(\"Step 1: Get job cities and titles from the scraper\"):\n            job_cities_scraper = scraped_jobs_data[1]\n            job_titles_scraper = scraped_jobs_data[0]\n    \n        with allure.step(\"Step 2: Get job cities and titles from the Peviitor API\"):\n            job_cities_peviitor = peviitor_jobs_data[1]\n            job_titles_peviitor = peviitor_jobs_data[0]\n    \n        with allure.step(\"Step 3: Compare job cities from scraper response against Peviitor API Response\"):\n            allure.attach(f\"Scraper Expected Results: {job_cities_scraper}\", name=\"Expected Results\")\n            allure.attach(f\"Peviitor Actual Results: {job_cities_peviitor}\", name=\"Actual Results\")\n>           testutils.check_job_cities(job_cities_scraper, job_cities_peviitor, job_titles_scraper, job_titles_peviitor)\n\ntests/Test_API_Suite/test_autototal.py:87: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.utils.TestUtils object at 0x7f05fc7a6ad0>\nexpected_cities = [['Alba', 'Iulia'], ['Arad'], ['Bucuresti'], ['Bucuresti'], ['Bucuresti'], ['Iasi'], ...]\nactual_cities = [['Alba Iulia', 'Albac', 'Alba', 'Iulia'], ['Arad'], ['Bucuresti'], ['Bucuresti'], ['Bucuresti'], ['Iasi'], ...]\njob_titles_scraper = ['Agent Vanzari Piese Camioane', 'Full Time Software Developer', 'Lucrator comercial in depozit (picker) – Bucuresti (...Lucrator comercial in depozit (picker)-Alba Iulia', 'Operator calculator (cu atributii de contabilitate primara)', ...]\napi_job_titles = ['Agent Vanzari Piese Camioane', 'Full Time Software Developer', 'Lucrator comercial in depozit (picker) – Bucuresti (...Lucrator comercial in depozit (picker)-Alba Iulia', 'Operator calculator (cu atributii de contabilitate primara)', ...]\n\n    def check_job_cities(self, expected_cities, actual_cities, job_titles_scraper, api_job_titles):\n        expected_cities, actual_cities, job_titles_scraper, api_job_titles = sorted(expected_cities), sorted(actual_cities), sorted(job_titles_scraper), sorted(api_job_titles)\n        if not expected_cities:\n            msg = f\"Scraper is not grabbing any job cities\"\n            allure.step(msg)\n            raise AssertionError(msg)\n    \n        msg = \"An unknown error occurred\"\n    \n        # Check jobs from scraper against the peviitor api\n        scraper_actual_cities, scraper_job_titles = self.get_different_items(expected_cities, actual_cities, job_titles_scraper)\n    \n        if scraper_actual_cities:\n            msg = f\"Peviitor is missing job cities for the following job titles: {scraper_job_titles}\"\n            allure.step(msg)\n            raise AssertionError(msg)\n        else:\n            # Check jobs from peviitor against the scraper response\n            peviitor_actual_cities, peviitor_job_titles = self.get_different_items(actual_cities, expected_cities, api_job_titles)\n            if peviitor_actual_cities:\n                msg = f\"Peviitor is having extra job cities for the following job titles: {peviitor_job_titles}\"\n                allure.step(msg)\n                raise AssertionError(msg)\n    \n        allure.step(msg)\n>       assert expected_cities == actual_cities, msg\nE       AssertionError: An unknown error occurred\n\ntests/utils.py:216: AssertionError"}, "steps": [{"name": "Step 1: Get job cities and titles from the scraper", "status": "passed", "start": 1714367795934, "stop": 1714367795934}, {"name": "Step 2: Get job cities and titles from the Peviitor API", "status": "passed", "start": 1714367795934, "stop": 1714367795935}, {"name": "Step 3: Compare job cities from scraper response against Peviitor API Response", "status": "failed", "statusDetails": {"message": "AssertionError: An unknown error occurred\n", "trace": "  File \"/home/runner/work/scrapers_Larisa_M16/scrapers_Larisa_M16/tests/Test_API_Suite/test_autototal.py\", line 87, in test_autototal_city_api\n    testutils.check_job_cities(job_cities_scraper, job_cities_peviitor, job_titles_scraper, job_titles_peviitor)\n  File \"/home/runner/work/scrapers_Larisa_M16/scrapers_Larisa_M16/tests/utils.py\", line 216, in check_job_cities\n    assert expected_cities == actual_cities, msg\n"}, "attachments": [{"name": "Expected Results", "source": "a23655bd-bd6c-4760-ae6e-e49593625adf-attachment.attach"}, {"name": "Actual Results", "source": "ecfdd553-86be-4fde-99c1-032251c958c4-attachment.attach"}], "start": 1714367795935, "stop": 1714367795935}], "start": 1714367795934, "stop": 1714367795935, "uuid": "9d03f709-931a-4320-8f20-7ecf50acec82", "historyId": "f4e98542c45db01f88ae48d08ec753f1", "testCaseId": "f4e98542c45db01f88ae48d08ec753f1", "fullName": "Test_API_Suite.test_autototal#test_autototal_city_api", "labels": [{"name": "tag", "value": "API"}, {"name": "tag", "value": "regression"}, {"name": "parentSuite", "value": "Test_API_Suite"}, {"name": "suite", "value": "test_autototal"}, {"name": "host", "value": "fv-az737-72"}, {"name": "thread", "value": "1968-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Test_API_Suite.test_autototal"}]}