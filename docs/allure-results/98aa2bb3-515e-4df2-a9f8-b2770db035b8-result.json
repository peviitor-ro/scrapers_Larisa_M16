{"name": "Test job cities from the accenture website against Peviitor API Response", "status": "failed", "statusDetails": {"message": "AssertionError: An unknown error occurred", "trace": "get_job_details = ((['Executive Assistant with Italian', 'SAP PP/QM/PM Consultant (all genders)', 'Content Reviewer with Russian', 'Seni...ture', 'Accenture', 'Accenture', 'Accenture', ...], ['remote', 'remote', 'remote', 'remote', 'remote', 'remote', ...]))\n\n    @pytest.mark.regression\n    @pytest.mark.API\n    def test_accenture_city_api(get_job_details):\n        allure.dynamic.title(f\"Test job cities from the {company_name} website against Peviitor API Response\")\n    \n        scraped_jobs_data, peviitor_jobs_data = get_job_details\n        with allure.step(\"Step 1: Get job cities and titles from the scraper\"):\n            job_cities_scraper = scraped_jobs_data[1]\n            job_titles_scraper = scraped_jobs_data[0]\n    \n        with allure.step(\"Step 2: Get job cities and titles from the Peviitor API\"):\n            job_cities_peviitor = peviitor_jobs_data[1]\n            job_titles_peviitor = peviitor_jobs_data[0]\n    \n        with allure.step(\"Step 3: Compare job cities from scraper response against Peviitor API Response\"):\n            allure.attach(f\"Scraper Expected Results: {job_cities_scraper}\", name=\"Expected Results\")\n            allure.attach(f\"Peviitor Actual Results: {job_cities_peviitor}\", name=\"Actual Results\")\n>           testutils.check_job_cities(job_cities_scraper, job_cities_peviitor, job_titles_scraper, job_titles_peviitor)\n\ntests/Test_API_Suite/test_accenture.py:87: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.utils.TestUtils object at 0x7f0855952c50>\nexpected_cities = [[], ['Brasov', 'Bucuresti'], ['Brasov', 'Bucuresti'], ['Brasov', 'Bucuresti', 'Cluj-Napoca', 'Iasi', 'Targu-Mures', 'Timisoara'], ['Bucuresti'], ['Bucuresti'], ...]\nactual_cities = [['Brasov', 'Bucuresti'], ['Brasov', 'Bucuresti'], ['Bucuresti'], ['Bucuresti'], ['Bucuresti'], ['Bucuresti'], ...]\njob_titles_scraper = ['App Cloud Tech Support Associate with Spanish', 'Content Reviewer with Russian', 'Contract Manager GLN Contracting',...tive Assistant with Italian', 'HR Partner Senior Analyst with Bulgarian', 'HR Partner Senior Analyst with French', ...]\napi_job_titles = ['App Cloud Tech Support Associate with Spanish', 'Back Office Representative with French', 'Content Reviewer with Greek', 'Content Reviewer with Russian', 'Contract Management Officer with French', 'HR Generalist with French', ...]\n\n    def check_job_cities(self, expected_cities, actual_cities, job_titles_scraper, api_job_titles):\n        expected_cities, actual_cities, job_titles_scraper, api_job_titles = sorted(expected_cities), sorted(actual_cities), sorted(job_titles_scraper), sorted(api_job_titles)\n        if not expected_cities:\n            msg = f\"Scraper is not grabbing any job cities\"\n            allure.step(msg)\n            raise AssertionError(msg)\n    \n        msg = \"An unknown error occurred\"\n    \n        # Check jobs from scraper against the peviitor api\n        scraper_actual_cities, scraper_job_titles = self.get_different_items(expected_cities, actual_cities, job_titles_scraper)\n    \n        if scraper_actual_cities:\n            msg = f\"Peviitor is missing job cities for the following job titles: {scraper_job_titles}\"\n            allure.step(msg)\n            raise AssertionError(msg)\n        else:\n            # Check jobs from peviitor against the scraper response\n            peviitor_actual_cities, peviitor_job_titles = self.get_different_items(actual_cities, expected_cities, api_job_titles)\n            if peviitor_actual_cities:\n                msg = f\"Peviitor is having extra job cities for the following job titles: {peviitor_job_titles}\"\n                allure.step(msg)\n                raise AssertionError(msg)\n    \n        allure.step(msg)\n>       assert expected_cities == actual_cities, msg\nE       AssertionError: An unknown error occurred\n\ntests/utils.py:216: AssertionError"}, "steps": [{"name": "Step 1: Get job cities and titles from the scraper", "status": "passed", "start": 1715577458746, "stop": 1715577458746}, {"name": "Step 2: Get job cities and titles from the Peviitor API", "status": "passed", "start": 1715577458746, "stop": 1715577458746}, {"name": "Step 3: Compare job cities from scraper response against Peviitor API Response", "status": "failed", "statusDetails": {"message": "AssertionError: An unknown error occurred\n", "trace": "  File \"/home/runner/work/scrapers_Larisa_M16/scrapers_Larisa_M16/tests/Test_API_Suite/test_accenture.py\", line 87, in test_accenture_city_api\n    testutils.check_job_cities(job_cities_scraper, job_cities_peviitor, job_titles_scraper, job_titles_peviitor)\n  File \"/home/runner/work/scrapers_Larisa_M16/scrapers_Larisa_M16/tests/utils.py\", line 216, in check_job_cities\n    assert expected_cities == actual_cities, msg\n"}, "attachments": [{"name": "Expected Results", "source": "aa6a38fc-27bf-4953-b672-f730da7a1fd4-attachment.attach"}, {"name": "Actual Results", "source": "87489540-9e0d-4958-ab3b-6124780ff46d-attachment.attach"}], "start": 1715577458746, "stop": 1715577458746}], "start": 1715577458746, "stop": 1715577458746, "uuid": "e1e765d3-3f5a-4082-9c9c-35e267c3831d", "historyId": "62e214e8351885ccc6844039e9e900bf", "testCaseId": "62e214e8351885ccc6844039e9e900bf", "fullName": "Test_API_Suite.test_accenture#test_accenture_city_api", "labels": [{"name": "tag", "value": "API"}, {"name": "tag", "value": "regression"}, {"name": "parentSuite", "value": "Test_API_Suite"}, {"name": "suite", "value": "test_accenture"}, {"name": "host", "value": "fv-az1533-130"}, {"name": "thread", "value": "2023-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Test_API_Suite.test_accenture"}]}