{"name": "Test if job titles from the corteva website contains special characters", "status": "failed", "statusDetails": {"message": "AssertionError: Peviitor is having job titles with special characters: ['Salesforce CRM Software Engineering Lead (DevOps)', 'Salesforce CRM Software Engineering Lead (Integrations)', 'Salesforce Mobile (CRM) IT Product Lead']", "trace": "get_job_details = ((['IT Services and Analytics Intern', 'Category Marketing Manager Oilseeds', 'Salesforce Mobile (CRM) IT Product Lead..., 'CORTEVA', 'CORTEVA', 'CORTEVA', 'CORTEVA', ...], ['remote', 'remote', 'remote', 'remote', 'remote', 'remote', ...]))\n\n    @pytest.mark.regression\n    @pytest.mark.API\n    def test_corteva_special_title_api(get_job_details):\n        allure.dynamic.title(f\"Test if job titles from the {company_name} website contains special characters\")\n    \n        scraped_jobs_data, peviitor_jobs_data = get_job_details\n        with allure.step(\"Step 1: Get job titles from the scraper\"):\n            job_titles_scraper = sorted(scraped_jobs_data[0])\n    \n        with allure.step(\"Step 2: Compare job titles from scraper response against the non special character variant\"):\n            allure.attach(f\"Scraper Actual Results: {job_titles_scraper}\", name=\"Expected Results\")\n>           TestUtils().check_special_job_titles(job_titles_scraper)\n\ntests/Test_API_Suite/test_corteva.py:65: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.utils.TestUtils object at 0x7f4556596ce0>\nexpected_titles = ['Area Sales Manager', 'Category Marketing Manager Oilseeds', 'IT Services and Analytics Intern', 'IT Services and Ana...', 'Salesforce CRM Software Engineering Lead (DevOps)', 'Salesforce CRM Software Engineering Lead (Integrations)', ...]\n\n    def check_special_job_titles(self, expected_titles):\n        # return if any job title contains special characters\n        special_job_titles = [self.check_special_characters(job_title) for job_title in expected_titles if self.check_special_characters(job_title) != False]\n    \n        msg = \"Unknown error occured\"\n    \n        if special_job_titles:\n            msg = f\"Peviitor is having job titles with special characters: {special_job_titles}\"\n    \n        if not expected_titles and not special_job_titles:\n            msg = f\"Scraper is not grabbing any job titles\"\n            allure.step(msg)\n            raise AssertionError(msg)\n    \n        # Search if there are special job titles missing from expected_titles\n        filtered_special_job_titles = [self.return_without_special_characters(job_title) for job_title in expected_titles]\n        allure.attach(f\"Scraper Expected Results: {filtered_special_job_titles}\", name=\"Actual Results\")\n    \n        allure.step(msg)\n>       assert special_job_titles == [], msg\nE       AssertionError: Peviitor is having job titles with special characters: ['Salesforce CRM Software Engineering Lead (DevOps)', 'Salesforce CRM Software Engineering Lead (Integrations)', 'Salesforce Mobile (CRM) IT Product Lead']\n\ntests/utils.py:168: AssertionError"}, "steps": [{"name": "Step 1: Get job titles from the scraper", "status": "passed", "start": 1712588792346, "stop": 1712588792346}, {"name": "Step 2: Compare job titles from scraper response against the non special character variant", "status": "failed", "statusDetails": {"message": "AssertionError: Peviitor is having job titles with special characters: ['Salesforce CRM Software Engineering Lead (DevOps)', 'Salesforce CRM Software Engineering Lead (Integrations)', 'Salesforce Mobile (CRM) IT Product Lead']\n", "trace": "  File \"/home/runner/work/scrapers_Larisa_M16/scrapers_Larisa_M16/tests/Test_API_Suite/test_corteva.py\", line 65, in test_corteva_special_title_api\n    TestUtils().check_special_job_titles(job_titles_scraper)\n  File \"/home/runner/work/scrapers_Larisa_M16/scrapers_Larisa_M16/tests/utils.py\", line 168, in check_special_job_titles\n    assert special_job_titles == [], msg\n"}, "attachments": [{"name": "Expected Results", "source": "790eb714-1163-40f9-a352-2abf4b41f0da-attachment.attach"}, {"name": "Actual Results", "source": "d21798ff-50fc-4c67-a3be-279eaf75abad-attachment.attach"}], "start": 1712588792346, "stop": 1712588792346}], "start": 1712588792346, "stop": 1712588792347, "uuid": "70819715-74e9-4f4b-8571-adefe82a3d64", "historyId": "959b6ac359f279d64dbd489cdd79c414", "testCaseId": "959b6ac359f279d64dbd489cdd79c414", "fullName": "Test_API_Suite.test_corteva#test_corteva_special_title_api", "labels": [{"name": "tag", "value": "API"}, {"name": "tag", "value": "regression"}, {"name": "parentSuite", "value": "Test_API_Suite"}, {"name": "suite", "value": "test_corteva"}, {"name": "host", "value": "fv-az848-752"}, {"name": "thread", "value": "2020-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Test_API_Suite.test_corteva"}]}